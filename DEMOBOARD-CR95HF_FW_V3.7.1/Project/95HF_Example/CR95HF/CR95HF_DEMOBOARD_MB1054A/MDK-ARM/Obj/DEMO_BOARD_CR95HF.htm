<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\DEMO_BOARD_CR95HF.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\DEMO_BOARD_CR95HF.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Tue Jan 14 06:18:23 2020
<BR><P>
<H3>Maximum Stack Usage =       2984 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
EP3_OUT_Callback &rArr; HID_Data_Out &rArr; HID_SendCustomCommand &rArr; HID_Run15693Anticollision &rArr; ISO15693_RunAntiCollision &rArr; ISO15693_Inventory16Slots &rArr; ISO15693_Inventory &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[76]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[32]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[32]">ADC1_2_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[4f]">ADC3_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[1a]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[35]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[36]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[d]">COMPOSITE_Data_Setup</a> from usb_prop.o(i.COMPOSITE_Data_Setup) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[11]">COMPOSITE_GetConfigDescriptor</a> from usb_prop.o(i.COMPOSITE_GetConfigDescriptor) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[10]">COMPOSITE_GetDeviceDescriptor</a> from usb_prop.o(i.COMPOSITE_GetDeviceDescriptor) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[12]">COMPOSITE_GetStringDescriptor</a> from usb_prop.o(i.COMPOSITE_GetStringDescriptor) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[f]">COMPOSITE_Get_Interface_Setting</a> from usb_prop.o(i.COMPOSITE_Get_Interface_Setting) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[e]">COMPOSITE_NoData_Setup</a> from usb_prop.o(i.COMPOSITE_NoData_Setup) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[a]">COMPOSITE_Reset</a> from usb_prop.o(i.COMPOSITE_Reset) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[b]">COMPOSITE_Status_In</a> from usb_prop.o(i.COMPOSITE_Status_In) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[c]">COMPOSITE_Status_Out</a> from usb_prop.o(i.COMPOSITE_Status_Out) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[9]">COMPOSITE_init</a> from usb_prop.o(i.COMPOSITE_init) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[14]">Composite_Device_ClearFeature</a> from usb_prop.o(i.Composite_Device_ClearFeature) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[13]">Composite_Device_SetConfiguration</a> from usb_prop.o(i.Composite_Device_SetConfiguration) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[15]">Composite_Device_SetDeviceAddress</a> from usb_prop.o(i.Composite_Device_SetDeviceAddress) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[2b]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[2c]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[2d]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[2e]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[2f]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[30]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[31]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[58]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[59]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[5a]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[5b]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[1d]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3]">EP1_IN_Callback</a> from usb_endp.o(i.EP1_IN_Callback) referenced 2 times from usb_istr.o(.data)
 <LI><a href="#[4]">EP2_IN_Callback</a> from usb_endp.o(i.EP2_IN_Callback) referenced 2 times from usb_istr.o(.data)
 <LI><a href="#[7]">EP2_OUT_Callback</a> from usb_endp.o(i.EP2_OUT_Callback) referenced 2 times from usb_istr.o(.data)
 <LI><a href="#[5]">EP3_IN_Callback</a> from usb_endp.o(i.EP3_IN_Callback) referenced 2 times from usb_istr.o(.data)
 <LI><a href="#[8]">EP3_OUT_Callback</a> from usb_endp.o(i.EP3_OUT_Callback) referenced 2 times from usb_istr.o(.data)
 <LI><a href="#[26]">EXTI0_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[48]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[27]">EXTI1_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[28]">EXTI2_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[29]">EXTI3_IRQHandler</a> from stm32f10x_it.o(i.EXTI3_IRQHandler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[2a]">EXTI4_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[37]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[24]">FLASH_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[50]">FSMC_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[5e]">HID_Report</a> from usb_prop.o(i.HID_Report) referenced from usb_prop.o(i.COMPOSITE_Data_Setup)
 <LI><a href="#[18]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[40]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3f]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[42]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[41]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[19]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[17]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[6]">NOP_Process</a> from usb_core.o(i.NOP_Process) referenced 30 times from usb_istr.o(.data)
 <LI><a href="#[21]">PVD_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[1e]">PendSV_Handler</a> from stm32f10x_it.o(i.PendSV_Handler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[25]">RCC_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[49]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[23]">RTC_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[16]">Reset_Handler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[51]">SDIO_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[43]">SPI1_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[44]">SPI2_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[53]">SPI3_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[1c]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[60]">Standard_GetConfiguration</a> from usb_core.o(i.Standard_GetConfiguration) referenced from usb_core.o(i.Data_Setup0)
 <LI><a href="#[61]">Standard_GetInterface</a> from usb_core.o(i.Standard_GetInterface) referenced from usb_core.o(i.Data_Setup0)
 <LI><a href="#[5f]">Standard_GetStatus</a> from usb_core.o(i.Standard_GetStatus) referenced from usb_core.o(i.Data_Setup0)
 <LI><a href="#[1f]">SysTick_Handler</a> from stm32f10x_it.o(i.SysTick_Handler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[5c]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_xl.o(.text)
 <LI><a href="#[22]">TAMPER_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[38]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3b]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3a]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[39]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3c]">TIM2_IRQHandler</a> from stm32f10x_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3d]">TIM3_IRQHandler</a> from drv_interrupt.o(i.TIM3_IRQHandler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3e]">TIM4_IRQHandler</a> from drv_interrupt.o(i.TIM4_IRQHandler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[52]">TIM5_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[56]">TIM6_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[57]">TIM7_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[4b]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[4e]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[4d]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[4c]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[54]">UART4_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[55]">UART5_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[45]">USART1_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[46]">USART2_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[47]">USART3_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[4a]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[33]">USB_HP_CAN1_TX_IRQHandler</a> from stm32f10x_it.o(i.USB_HP_CAN1_TX_IRQHandler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[34]">USB_LP_CAN1_RX0_IRQHandler</a> from stm32f10x_it.o(i.USB_LP_CAN1_RX0_IRQHandler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[1b]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[20]">WWDG_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[62]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_xl.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[62]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[63]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[65]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[162]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[163]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[164]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[165]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[166]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[69]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[167]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[168]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[169]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[16a]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[16b]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[16c]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[16d]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[16e]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[16f]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[170]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[171]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[172]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[173]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[174]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[175]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[176]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[177]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[178]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[179]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[17a]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[17b]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[6e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[17c]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[17d]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[17e]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[17f]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[180]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[181]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[182]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[64]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[183]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[66]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[68]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[184]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[6a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; ConfigManager_TagHunting &rArr; FELICA_Initialization &rArr; FELICA_Init &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[185]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[77]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[6d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[186]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[6f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[16]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_xl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Idle
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FELICA_IsPresent
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_Inventory16Slots
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_CompleteStruture
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteRegister
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ProtocolSelect
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_MultiTagPart2
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_MultiTagHunting
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_RunMultiTagHunting
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_RunInventoty16slots
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Run15693Anticollision
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_MultiTagResPart2
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetHardwareVersion
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_ChainedCommand
</UL>

<P><STRONG><a name="[71]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[187]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_ConfigureTypeBPrime
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Allow512bytesBuffer
</UL>

<P><STRONG><a name="[188]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_InitStructure
</UL>

<P><STRONG><a name="[73]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[18b]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FELICA_IsPresent
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_RunInventory16slots
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_RunAntiCollision
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Allow512bytesBuffer
</UL>

<P><STRONG><a name="[18c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[18e]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[6c]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[191]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[192]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[193]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1a]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[195]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>ByteSwap</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_regs.o(i.ByteSwap))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[d]"></a>COMPOSITE_Data_Setup</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usb_prop.o(i.COMPOSITE_Data_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = COMPOSITE_Data_Setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>COMPOSITE_GetConfigDescriptor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_prop.o(i.COMPOSITE_GetConfigDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = COMPOSITE_GetConfigDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>COMPOSITE_GetDeviceDescriptor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_prop.o(i.COMPOSITE_GetDeviceDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = COMPOSITE_GetDeviceDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>COMPOSITE_GetStringDescriptor</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usb_prop.o(i.COMPOSITE_GetStringDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = COMPOSITE_GetStringDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>COMPOSITE_Get_Interface_Setting</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_prop.o(i.COMPOSITE_Get_Interface_Setting))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>COMPOSITE_NoData_Setup</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_prop.o(i.COMPOSITE_NoData_Setup))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>COMPOSITE_Reset</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, usb_prop.o(i.COMPOSITE_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = COMPOSITE_Reset &rArr; SetEPTxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceAddress
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPType
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxAddr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxValid
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxAddr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBTABLE
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Status_Out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>COMPOSITE_Status_In</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_prop.o(i.COMPOSITE_Status_In))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>COMPOSITE_Status_Out</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_prop.o(i.COMPOSITE_Status_Out))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>COMPOSITE_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb_prop.o(i.COMPOSITE_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = COMPOSITE_init
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[145]"></a>CTR_HP</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, usb_int.o(i.CTR_HP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CTR_HP
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HP_CAN1_TX_IRQHandler
</UL>

<P><STRONG><a name="[86]"></a>CTR_LP</STRONG> (Thumb, 616 bytes, Stack size 8 bytes, usb_int.o(i.CTR_LP))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[129]"></a>ClearDTOG_RX</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usb_regs.o(i.ClearDTOG_RX))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>

<P><STRONG><a name="[128]"></a>ClearDTOG_TX</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usb_regs.o(i.ClearDTOG_TX))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>

<P><STRONG><a name="[7f]"></a>Clear_Status_Out</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usb_regs.o(i.Clear_Status_Out))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMPOSITE_Reset
</UL>

<P><STRONG><a name="[14]"></a>Composite_Device_ClearFeature</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_prop.o(i.Composite_Device_ClearFeature))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>Composite_Device_SetConfiguration</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_prop.o(i.Composite_Device_SetConfiguration))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>Composite_Device_SetDeviceAddress</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_prop.o(i.Composite_Device_SetDeviceAddress))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[8a]"></a>ConfigManager_HWInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lib_configmanager.o(i.ConfigManager_HWInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = ConfigManager_HWInit &rArr; ConfigManager_PORsequence &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_PORsequence
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_IDN
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>ConfigManager_Stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib_configmanager.o(i.ConfigManager_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Data_Out
</UL>

<P><STRONG><a name="[95]"></a>ConfigManager_TagHunting</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, lib_configmanager.o(i.ConfigManager_TagHunting))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = ConfigManager_TagHunting &rArr; FELICA_Initialization &rArr; FELICA_Init &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_Start
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_FieldOff
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FELICA_IsPresent
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FELICA_Initialization
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_GetUID
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_IsPresent
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_Anticollision
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOPAZ_ID
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_IsPresent
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_Anticollision
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>EP1_IN_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_endp.o(i.EP1_IN_Callback))
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>EP2_IN_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_endp.o(i.EP2_IN_Callback))
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>EP2_OUT_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_endp.o(i.EP2_OUT_Callback))
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>EP3_IN_Callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usb_endp.o(i.EP3_IN_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EP3_IN_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Data_In
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>EP3_OUT_Callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usb_endp.o(i.EP3_OUT_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 2984<LI>Call Chain = EP3_OUT_Callback &rArr; HID_Data_Out &rArr; HID_SendCustomCommand &rArr; HID_Run15693Anticollision &rArr; ISO15693_RunAntiCollision &rArr; ISO15693_Inventory16Slots &rArr; ISO15693_Inventory &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Data_Out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_it.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
</UL>

<P><STRONG><a name="[ab]"></a>EXTI_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
</UL>

<P><STRONG><a name="[15c]"></a>EXTI_Init</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvInt_Enable_Reply_IRQ
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvInt_Enable_RFEvent_IRQ
</UL>

<P><STRONG><a name="[9d]"></a>FELICA_Initialization</STRONG> (Thumb, 18 bytes, Stack size 536 bytes, lib_iso18092pcd.o(i.FELICA_Initialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = FELICA_Initialization &rArr; FELICA_Init &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FELICA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagHunting
</UL>

<P><STRONG><a name="[9e]"></a>FELICA_IsPresent</STRONG> (Thumb, 82 bytes, Stack size 536 bytes, lib_iso18092pcd.o(i.FELICA_IsPresent))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = FELICA_IsPresent &rArr; FELICA_REQC &rArr; PCD_CheckSendReceive &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FELICA_REQC
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagHunting
</UL>

<P><STRONG><a name="[da]"></a>GPIO_Init</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQOut_GPIO_Config
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_GPIOConfigUART
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_GPIOConfigSPI
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Disconnect_Config
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Config
</UL>

<P><STRONG><a name="[c0]"></a>GPIO_ReadInputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputData))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetIRQOutState
</UL>

<P><STRONG><a name="[14b]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_GetInterfacePinState
</UL>

<P><STRONG><a name="[11f]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSPINSSPulse
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendSPICommand
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_ResetSPI
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_ReceiveSPIResponse
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SPIPollingCommand
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
</UL>

<P><STRONG><a name="[11e]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSPINSSPulse
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendSPICommand
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_ResetSPI
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_ReceiveSPIResponse
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SPIPollingCommand
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_GPIOConfigSPI
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
</UL>

<P><STRONG><a name="[db]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQOut_GPIO_Config
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendIRQINPulse
</UL>

<P><STRONG><a name="[a6]"></a>GetEPRxAddr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPRxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
</UL>

<P><STRONG><a name="[147]"></a>GetEPRxCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
</UL>

<P><STRONG><a name="[a3]"></a>GetEPTxAddr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPTxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
</UL>

<P><STRONG><a name="[a9]"></a>HID_Data_In</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_hid.o(i.HID_Data_In))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP3_IN_Callback
</UL>

<P><STRONG><a name="[aa]"></a>HID_Data_Out</STRONG> (Thumb, 206 bytes, Stack size 600 bytes, usb_hid.o(i.HID_Data_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 2976<LI>Call Chain = HID_Data_Out &rArr; HID_SendCustomCommand &rArr; HID_Run15693Anticollision &rArr; ISO15693_RunAntiCollision &rArr; ISO15693_Inventory16Slots &rArr; ISO15693_Inventory &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_Stop
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP3_OUT_Callback
</UL>

<P><STRONG><a name="[5e]"></a>HID_Report</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_prop.o(i.HID_Report))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HID_Report &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(i.COMPOSITE_Data_Setup)
</UL>
<P><STRONG><a name="[18]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>IRQOut_Config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_interrupt.o(i.IRQOut_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = IRQOut_Config &rArr; IRQOut_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQOut_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_InitilizeSerialInterface
</UL>

<P><STRONG><a name="[9c]"></a>ISO14443A_Anticollision</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, lib_iso14443apcd.o(i.ISO14443A_Anticollision))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = ISO14443A_Anticollision &rArr; ISO14443A_ACLevel3 &rArr; ISO14443A_AC &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ConfigFDTforRATS
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_RATS
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ACLevel3
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ACLevel2
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ACLevel1
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ConfigFDT
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagHunting
</UL>

<P><STRONG><a name="[e3]"></a>ISO14443A_ConfigFDT</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, lib_iso14443apcd.o(i.ISO14443A_ConfigFDT))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = ISO14443A_ConfigFDT &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteRegister
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ProtocolSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_Anticollision
</UL>

<P><STRONG><a name="[e4]"></a>ISO14443A_ConfigFDTforAnticollision</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, lib_iso14443apcd.o(i.ISO14443A_ConfigFDTforAnticollision))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = ISO14443A_ConfigFDTforAnticollision &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteRegister
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ProtocolSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_Init
</UL>

<P><STRONG><a name="[e1]"></a>ISO14443A_ConfigFDTforRATS</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, lib_iso14443apcd.o(i.ISO14443A_ConfigFDTforRATS))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = ISO14443A_ConfigFDTforRATS &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteRegister
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ProtocolSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_Anticollision
</UL>

<P><STRONG><a name="[99]"></a>ISO14443A_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lib_iso14443apcd.o(i.ISO14443A_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = ISO14443A_Init &rArr; ISO14443A_ConfigFDTforAnticollision &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ConfigFDTforAnticollision
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_InitStructure
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagHunting
</UL>

<P><STRONG><a name="[9a]"></a>ISO14443A_IsPresent</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lib_iso14443apcd.o(i.ISO14443A_IsPresent))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = ISO14443A_IsPresent &rArr; ISO14443A_REQA &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_IsReaderResultCodeOk
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_REQA
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagHunting
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_MultiTagHunting
</UL>

<P><STRONG><a name="[d3]"></a>ISO14443A_MultiTagHunting</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, lib_iso14443apcd.o(i.ISO14443A_MultiTagHunting))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = ISO14443A_MultiTagHunting &rArr; ISO14443A_MultiAnticollision &rArr; ISO14443A_ACLevel3 &rArr; ISO14443A_AC &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_IsPresent
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_MultiAnticollision
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_InitStructure
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_RunMultiTagHunting
</UL>

<P><STRONG><a name="[cb]"></a>ISO14443A_MultiTagPart2</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lib_iso14443apcd.o(i.ISO14443A_MultiTagPart2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ISO14443A_MultiTagPart2
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_MultiTagResPart2
</UL>

<P><STRONG><a name="[a0]"></a>ISO14443B_Anticollision</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lib_iso14443bpcd.o(i.ISO14443B_Anticollision))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = ISO14443B_Anticollision &rArr; ISO14443B_AttriB &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_AttriB
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ProtocolSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagHunting
</UL>

<P><STRONG><a name="[ef]"></a>ISO14443B_AttriB</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, lib_iso14443bpcd.o(i.ISO14443B_AttriB))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = ISO14443B_AttriB &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_IsCRCOk
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_Anticollision
</UL>

<P><STRONG><a name="[f1]"></a>ISO14443B_Init</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, lib_iso14443bpcd.o(i.ISO14443B_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = ISO14443B_Init &rArr; ISO14443B_WriteAndCheckARConfigB &rArr; ISO14443B_WriteARConfigB &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_WriteAndCheckARConfigB
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_InitStructure
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ProtocolSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_IsPresent
</UL>

<P><STRONG><a name="[9f]"></a>ISO14443B_IsPresent</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lib_iso14443bpcd.o(i.ISO14443B_IsPresent))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = ISO14443B_IsPresent &rArr; ISO14443B_Init &rArr; ISO14443B_WriteAndCheckARConfigB &rArr; ISO14443B_WriteARConfigB &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_ReqB
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagHunting
</UL>

<P><STRONG><a name="[f5]"></a>ISO14443B_ReqB</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lib_iso14443bpcd.o(i.ISO14443B_ReqB))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = ISO14443B_ReqB &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_CompleteStruture
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_IsPresent
</UL>

<P><STRONG><a name="[a1]"></a>ISO15693_GetUID</STRONG> (Thumb, 140 bytes, Stack size 56 bytes, lib_iso15693pcd.o(i.ISO15693_GetUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = ISO15693_GetUID &rArr; ISO15693_Inventory &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_Inventory
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_CreateRequestFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagHunting
</UL>

<P><STRONG><a name="[f7]"></a>ISO15693_Init</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lib_iso15693pcd.o(i.ISO15693_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = ISO15693_Init &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteRegister
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ProtocolSelect
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_IsReaderResultCodeOk
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_GetUID
</UL>

<P><STRONG><a name="[cf]"></a>ISO15693_RunAntiCollision</STRONG> (Thumb, 506 bytes, Stack size 1128 bytes, lib_iso15693pcd.o(i.ISO15693_RunAntiCollision))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152<LI>Call Chain = ISO15693_RunAntiCollision &rArr; ISO15693_Inventory16Slots &rArr; ISO15693_Inventory &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayHighPriority_ms
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_SplitInventoryResponse
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_StayQuiet
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_IsATagInTheField
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_InventoryOneSlot
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_Inventory16Slots
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Run15693Anticollision
</UL>

<P><STRONG><a name="[d1]"></a>ISO15693_RunInventory16slots</STRONG> (Thumb, 188 bytes, Stack size 584 bytes, lib_iso15693pcd.o(i.ISO15693_RunInventory16slots))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608<LI>Call Chain = ISO15693_RunInventory16slots &rArr; ISO15693_Inventory16Slots &rArr; ISO15693_Inventory &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_SplitInventoryResponse
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_Inventory16Slots
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_RunInventoty16slots
</UL>

<P><STRONG><a name="[104]"></a>ISO15693_SplitInventoryResponse</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, lib_iso15693pcd.o(i.ISO15693_SplitInventoryResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ISO15693_SplitInventoryResponse &rArr; ISO15693_IsCorrectCRC16Residue &rArr; ISO15693_CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_IsCorrectCRC16Residue
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_RunInventory16slots
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_RunAntiCollision
</UL>

<P><STRONG><a name="[87]"></a>In0_Process</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, usb_core.o(i.In0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = In0_Process &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceAddress
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[109]"></a>Interrupts_Config</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, hw_config.o(i.Interrupts_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Interrupts_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10c]"></a>LED_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, drv_led.o(i.LED_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LED_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[161]"></a>LED_Off</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_led.o(i.LED_Off))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[160]"></a>LED_On</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_led.o(i.LED_On))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NOP_Process</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_core.o(i.NOP_Process))
<BR>[Address Reference Count : 2]<UL><LI> usb_istr.o(.data)
<LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[10b]"></a>NVIC_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayHighPriority_ms
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupts_Config
</UL>

<P><STRONG><a name="[10a]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupts_Config
</UL>

<P><STRONG><a name="[15d]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>Out0_Process</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usb_core.o(i.Out0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Out0_Process &rArr; DataStageOut &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[b4]"></a>PCD_CheckSendReceive</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lib_pcd.o(i.PCD_CheckSendReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = PCD_CheckSendReceive &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_IsReaderResultCodeOk
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FELICA_REQC
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOPAZ_ID
</UL>

<P><STRONG><a name="[c3]"></a>PCD_Echo</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lib_pcd.o(i.PCD_Echo))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = PCD_Echo &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_PORsequence
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ProtocolSelect
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GotoTagDetectingState
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetTagDetectionRefValue
</UL>

<P><STRONG><a name="[97]"></a>PCD_FieldOff</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, lib_pcd.o(i.PCD_FieldOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = PCD_FieldOff &rArr; PCD_ProtocolSelect &rArr; PCD_PORsequence &rArr; PCD_Echo &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ProtocolSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagHunting
</UL>

<P><STRONG><a name="[c4]"></a>PCD_Idle</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, lib_pcd.o(i.PCD_Idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = PCD_Idle &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendSPICommand
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GotoTagDetectingState
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetTagDetectionRefValue
</UL>

<P><STRONG><a name="[ea]"></a>PCD_IsCRCOk</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, lib_pcd.o(i.PCD_IsCRCOk))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_AttriB
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_RATS
</UL>

<P><STRONG><a name="[e8]"></a>PCD_IsReaderResultCodeOk</STRONG> (Thumb, 254 bytes, Stack size 0 bytes, lib_pcd.o(i.PCD_IsReaderResultCodeOk))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_SendEOF
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_Inventory
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ReadRegister
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CheckSendReceive
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_IsPresent
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_RATS
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
</UL>

<P><STRONG><a name="[cd]"></a>PCD_PORsequence</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, lib_pcd.o(i.PCD_PORsequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = PCD_PORsequence &rArr; PCD_Echo &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_ResetSPI
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Echo
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ProtocolSelect
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Reset95HF
</UL>

<P><STRONG><a name="[ae]"></a>PCD_ProtocolSelect</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, lib_pcd.o(i.PCD_ProtocolSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = PCD_ProtocolSelect &rArr; PCD_PORsequence &rArr; PCD_Echo &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_PORsequence
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Echo
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsAnAvailableProtocol
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_FieldOff
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FELICA_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_Anticollision
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ConfigFDTforRATS
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ConfigFDTforAnticollision
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ConfigFDT
</UL>

<P><STRONG><a name="[ee]"></a>PCD_ReadRegister</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, lib_pcd.o(i.PCD_ReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = PCD_ReadRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_IsReaderResultCodeOk
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443BReadARConfigB
</UL>

<P><STRONG><a name="[106]"></a>PCD_SendEOF</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lib_pcd.o(i.PCD_SendEOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = PCD_SendEOF &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_SendEOF
</UL>

<P><STRONG><a name="[dd]"></a>PCD_SendRecv</STRONG> (Thumb, 98 bytes, Stack size 280 bytes, lib_pcd.o(i.PCD_SendRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_IsReaderResultCodeOk
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_StayQuiet
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_Inventory
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_ReqB
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_AttriB
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_REQA
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_RATS
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_HLTA
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ACLevel3
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ACLevel2
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ACLevel1
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_AC
</UL>

<P><STRONG><a name="[af]"></a>PCD_WriteRegister</STRONG> (Thumb, 62 bytes, Stack size 288 bytes, lib_pcd.o(i.PCD_WriteRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FELICA_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_WriteARConfigB
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443BReadARConfigB
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ConfigFDTforRATS
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ConfigFDTforAnticollision
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ConfigFDT
</UL>

<P><STRONG><a name="[a7]"></a>PMAToUserBufferCopy</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, usb_mem.o(i.PMAToUserBufferCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PMAToUserBufferCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
</UL>

<P><STRONG><a name="[1e]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[108]"></a>Post0_Process</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usb_core.o(i.Post0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Post0_Process &rArr; SetEPRxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
</UL>

<P><STRONG><a name="[84]"></a>PowerOn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, usb_pwr.o(i.PowerOn))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMPOSITE_init
</UL>

<P><STRONG><a name="[15e]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[124]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_RCCConfigUART
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_RCC_Config
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBClock
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>

<P><STRONG><a name="[118]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[10d]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_RCCConfigUART
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_RCCConfigSPI
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Disconnect_Config
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Config
</UL>

<P><STRONG><a name="[117]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[143]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 128 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[126]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_USBCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBClock
</UL>

<P><STRONG><a name="[15a]"></a>SPI_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_StructureConfigSPI
</UL>

<P><STRONG><a name="[116]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_I2S_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_InitializeSPI
</UL>

<P><STRONG><a name="[11b]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendReceiveByte
</UL>

<P><STRONG><a name="[11d]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendReceiveByte
</UL>

<P><STRONG><a name="[11c]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendReceiveByte
</UL>

<P><STRONG><a name="[159]"></a>SPI_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_StructureConfigSPI
</UL>

<P><STRONG><a name="[119]"></a>SPI_SendReceiveBuffer</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, drv_spi.o(i.SPI_SendReceiveBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendSPICommand
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_ReceiveSPIResponse
</UL>

<P><STRONG><a name="[11a]"></a>SPI_SendReceiveByte</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, drv_spi.o(i.SPI_SendReceiveByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendReceiveBuffer
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendSPICommand
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_ReceiveSPIResponse
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendSPIResetByte
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SPIPollingCommand
</UL>

<P><STRONG><a name="[158]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_StructureConfigSPI
</UL>

<P><STRONG><a name="[1c]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>SendSPINSSPulse</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, drv_interrupt.o(i.SendSPINSSPulse))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SendSPINSSPulse &rArr; delayHighPriority_ms &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayHighPriority_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
</UL>

<P><STRONG><a name="[79]"></a>SetBTABLE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_regs.o(i.SetBTABLE))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMPOSITE_Reset
</UL>

<P><STRONG><a name="[83]"></a>SetDeviceAddress</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, usb_core.o(i.SetDeviceAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetDeviceAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMPOSITE_Reset
</UL>

<P><STRONG><a name="[7c]"></a>SetEPRxAddr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPRxAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPRxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMPOSITE_Reset
</UL>

<P><STRONG><a name="[7d]"></a>SetEPRxCount</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPRxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMPOSITE_Reset
</UL>

<P><STRONG><a name="[82]"></a>SetEPRxStatus</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, usb_regs.o(i.SetEPRxStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetEPRxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMPOSITE_Reset
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Data_Out
</UL>

<P><STRONG><a name="[80]"></a>SetEPRxValid</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPRxValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPRxValid
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMPOSITE_Reset
</UL>

<P><STRONG><a name="[7e]"></a>SetEPTxAddr</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPTxAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPTxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMPOSITE_Reset
</UL>

<P><STRONG><a name="[81]"></a>SetEPTxCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPTxCount))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMPOSITE_Reset
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
</UL>

<P><STRONG><a name="[7b]"></a>SetEPTxStatus</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, usb_regs.o(i.SetEPTxStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetEPTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMPOSITE_Reset
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Data_Out
</UL>

<P><STRONG><a name="[7a]"></a>SetEPType</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPType
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMPOSITE_Reset
</UL>

<P><STRONG><a name="[122]"></a>Set_System</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hw_config.o(i.Set_System))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Set_System &rArr; USB_Disconnect_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Disconnect_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[125]"></a>Set_USBClock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hw_config.o(i.Set_USBClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set_USBClock
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_USBCLKConfig
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>Setup0_Process</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, usb_core.o(i.Setup0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSwap
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[111]"></a>Standard_ClearFeature</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, usb_core.o(i.Standard_ClearFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Standard_ClearFeature &rArr; SetEPTxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_TX
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_RX
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[60]"></a>Standard_GetConfiguration</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetConfiguration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[78]"></a>Standard_GetDescriptorData</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetDescriptorData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetDescriptorData
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Report
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMPOSITE_GetStringDescriptor
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMPOSITE_GetDeviceDescriptor
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMPOSITE_GetConfigDescriptor
</UL>

<P><STRONG><a name="[61]"></a>Standard_GetInterface</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetInterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[5f]"></a>Standard_GetStatus</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[10f]"></a>Standard_SetConfiguration</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usb_core.o(i.Standard_SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[110]"></a>Standard_SetDeviceFeature</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_core.o(i.Standard_SetDeviceFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetDeviceFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[113]"></a>Standard_SetEndPointFeature</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, usb_core.o(i.Standard_SetEndPointFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Standard_SetEndPointFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[112]"></a>Standard_SetInterface</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, usb_core.o(i.Standard_SetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[12a]"></a>StartTimeOut</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, drv_interrupt.o(i.StartTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StartTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveByte
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SPIPollingCommand
</UL>

<P><STRONG><a name="[12d]"></a>StopTimeOut</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_interrupt.o(i.StopTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StopTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveByte
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SPIPollingCommand
</UL>

<P><STRONG><a name="[1f]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(.text)
</UL>
<P><STRONG><a name="[3c]"></a>TIM2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f10x_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrement_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM3_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_interrupt.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM4_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_interrupt.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[12e]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvInt_TimeoutTimerConfig
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvInt_AppliTimeoutTimerConfig
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayHighPriority_ms
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Structure_Config
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDelay_us_Config
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDelay_ms_Config
</UL>

<P><STRONG><a name="[12c]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopTimeOut
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimeOut
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SPIPollingCommand
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvInt_TimeoutTimerConfig
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvInt_AppliTimeoutTimerConfig
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayHighPriority_ms
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDelay_us_Config
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDelay_ms_Config
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[133]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvInt_TimeoutTimerConfig
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvInt_AppliTimeoutTimerConfig
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Structure_Config
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDelay_us_Config
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDelay_ms_Config
</UL>

<P><STRONG><a name="[12b]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimeOut
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayHighPriority_ms
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[131]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvInt_TimeoutTimerConfig
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvInt_AppliTimeoutTimerConfig
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Structure_Config
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDelay_us_Config
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDelay_ms_Config
</UL>

<P><STRONG><a name="[132]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_UpdateRequestConfig))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvInt_TimeoutTimerConfig
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvInt_AppliTimeoutTimerConfig
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Structure_Config
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDelay_us_Config
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDelay_ms_Config
</UL>

<P><STRONG><a name="[9b]"></a>TOPAZ_ID</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lib_iso14443apcd.o(i.TOPAZ_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = TOPAZ_ID &rArr; PCD_CheckSendReceive &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CheckSendReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagHunting
</UL>

<P><STRONG><a name="[135]"></a>Timer_Config</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hw_config.o(i.Timer_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Timer_Config &rArr; Timer_Structure_Config &rArr; drvInt_TimeoutTimerConfig &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Structure_Config
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_RCC_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[136]"></a>Timer_RCC_Config</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hw_config.o(i.Timer_RCC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer_RCC_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Config
</UL>

<P><STRONG><a name="[137]"></a>Timer_Structure_Config</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, hw_config.o(i.Timer_Structure_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Timer_Structure_Config &rArr; drvInt_TimeoutTimerConfig &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvInt_TimeoutTimerConfig
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvInt_AppliTimeoutTimerConfig
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_UpdateRequestConfig
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Config
</UL>

<P><STRONG><a name="[13a]"></a>UART_ReceiveBuffer</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, drv_uart.o(i.UART_ReceiveBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_ReceiveBuffer &rArr; UART_ReceiveByte &rArr; StopTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_ReceiveUARTResponse
</UL>

<P><STRONG><a name="[13b]"></a>UART_ReceiveByte</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_uart.o(i.UART_ReceiveByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_ReceiveByte &rArr; StopTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopTimeOut
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimeOut
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveBuffer
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_ReceiveUARTResponse
</UL>

<P><STRONG><a name="[13e]"></a>UART_SendBuffer</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, drv_uart.o(i.UART_SendBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_SendBuffer &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendUARTCommand
</UL>

<P><STRONG><a name="[13f]"></a>UART_SendByte</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, drv_uart.o(i.UART_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendBuffer
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendIRQINPulse
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendUARTCommand
</UL>

<P><STRONG><a name="[15b]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_StructureConfigUART
</UL>

<P><STRONG><a name="[141]"></a>USART_DeInit</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_InitializeUART
</UL>

<P><STRONG><a name="[13c]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveByte
</UL>

<P><STRONG><a name="[142]"></a>USART_Init</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_StructureConfigUART
</UL>

<P><STRONG><a name="[13d]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveByte
</UL>

<P><STRONG><a name="[140]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
</UL>

<P><STRONG><a name="[144]"></a>USB_Cable_Config</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hw_config.o(i.USB_Cable_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Cable_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[123]"></a>USB_Disconnect_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hw_config.o(i.USB_Disconnect_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_Disconnect_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
</UL>

<P><STRONG><a name="[33]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(i.USB_HP_CAN1_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_HP_CAN1_TX_IRQHandler &rArr; CTR_HP
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_HP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[15f]"></a>USB_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usb_init.o(i.USB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[146]"></a>USB_Istr</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, usb_istr.o(i.USB_Istr))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USB_Istr &rArr; CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[34]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(i.USB_LP_CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = USB_LP_CAN1_RX0_IRQHandler &rArr; USB_Istr &rArr; CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>USB_SIL_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_sil.o(i.USB_SIL_Init))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMPOSITE_init
</UL>

<P><STRONG><a name="[bb]"></a>USB_SIL_Read</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usb_sil.o(i.USB_SIL_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_SIL_Read &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMAToUserBufferCopy
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxAddr
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Data_Out
</UL>

<P><STRONG><a name="[bd]"></a>USB_SIL_Write</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usb_sil.o(i.USB_SIL_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_SIL_Write &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPTxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Data_Out
</UL>

<P><STRONG><a name="[1b]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>UserToPMABufferCopy</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, usb_mem.o(i.UserToPMABufferCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UserToPMABufferCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Write
</UL>

<P><STRONG><a name="[12f]"></a>decrement_delay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hw_config.o(i.decrement_delay))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[fe]"></a>delayHighPriority_ms</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, hw_config.o(i.delayHighPriority_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = delayHighPriority_ms &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSPINSSPulse
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendIRQINPulse
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_ResetSPI
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_RunAntiCollision
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_Inventory16Slots
</UL>

<P><STRONG><a name="[98]"></a>delay_ms</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, hw_config.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = delay_ms &rArr; TimerDelay_ms_Config &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDelay_ms_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SPIPollingCommand
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagHunting
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_GetUID
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_MultiTagHunting
</UL>

<P><STRONG><a name="[b0]"></a>delay_us</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hw_config.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = delay_us &rArr; TimerDelay_us_Config &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDelay_us_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FELICA_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_MultiTagHunting
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_Init
</UL>

<P><STRONG><a name="[90]"></a>drv95HF_EnableInterrupt</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_95hf.o(i.drv95HF_EnableInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = drv95HF_EnableInterrupt &rArr; drvInt_Enable_Reply_IRQ &rArr; EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvInt_Enable_Reply_IRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_Init
</UL>

<P><STRONG><a name="[c2]"></a>drv95HF_GetInterfacePinState</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_95hf.o(i.drv95HF_GetInterfacePinState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = drv95HF_GetInterfacePinState
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_InitilizeSerialInterface
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetInterfaceBus
</UL>

<P><STRONG><a name="[93]"></a>drv95HF_GetSerialInterface</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_95hf.o(i.drv95HF_GetSerialInterface))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_PORsequence
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GotoTagDetectingState
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetTagDetectionRefValue
</UL>

<P><STRONG><a name="[8f]"></a>drv95HF_InitConfigStructure</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drv_95hf.o(i.drv95HF_InitConfigStructure))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_Init
</UL>

<P><STRONG><a name="[14f]"></a>drv95HF_InitializeUART</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_95hf.o(i.drv95HF_InitializeUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = drv95HF_InitializeUART &rArr; drv95HF_StructureConfigUART &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_StructureConfigUART
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_RCCConfigUART
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_GPIOConfigUART
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_InitilizeSerialInterface
</UL>

<P><STRONG><a name="[91]"></a>drv95HF_InitilizeSerialInterface</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, drv_95hf.o(i.drv95HF_InitilizeSerialInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = drv95HF_InitilizeSerialInterface &rArr; drv95HF_InitializeUART &rArr; drv95HF_StructureConfigUART &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQOut_Config
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_InitializeUART
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_GetInterfacePinState
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_InitializeSPI
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_Init
</UL>

<P><STRONG><a name="[c5]"></a>drv95HF_PoolingReading</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, drv_95hf.o(i.drv95HF_PoolingReading))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = drv95HF_PoolingReading &rArr; drv95HF_ReceiveSPIResponse &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_ReceiveSPIResponse
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SPIPollingCommand
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_ReceiveUARTResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetTagDetectionRefValue
</UL>

<P><STRONG><a name="[153]"></a>drv95HF_ReceiveSPIResponse</STRONG> (Thumb, 162 bytes, Stack size 544 bytes, drv_95hf.o(i.drv95HF_ReceiveSPIResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = drv95HF_ReceiveSPIResponse &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendReceiveByte
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendReceiveBuffer
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_PoolingReading
</UL>

<P><STRONG><a name="[94]"></a>drv95HF_ResetSPI</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, drv_95hf.o(i.drv95HF_ResetSPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = drv95HF_ResetSPI &rArr; drv95HF_SendIRQINPulse &rArr; delayHighPriority_ms &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendIRQINPulse
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendSPIResetByte
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayHighPriority_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_PORsequence
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_PORsequence
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GotoTagDetectingState
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetTagDetectionRefValue
</UL>

<P><STRONG><a name="[92]"></a>drv95HF_SendIRQINPulse</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, drv_95hf.o(i.drv95HF_SendIRQINPulse))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = drv95HF_SendIRQINPulse &rArr; delayHighPriority_ms &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayHighPriority_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_ResetSPI
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_PORsequence
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
</UL>

<P><STRONG><a name="[8e]"></a>drv95HF_SendReceive</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, drv_95hf.o(i.drv95HF_SendReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvInt_Enable_Reply_IRQ
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drvInt_Enable_RFEvent_IRQ
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendSPICommand
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_ReceiveSPIResponse
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendUARTCommand
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SPIPollingCommand
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_ReceiveUARTResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_PORsequence
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_IDN
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Echo
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendEOF
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ReadRegister
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteRegister
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ProtocolSelect
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CheckSendReceive
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_ConfigureTypeBPrime
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_ChainedCommand
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Allow512bytesBuffer
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Data_Out
</UL>

<P><STRONG><a name="[114]"></a>drv95HF_SendSPICommand</STRONG> (Thumb, 100 bytes, Stack size 544 bytes, drv_95hf.o(i.drv95HF_SendSPICommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendReceiveByte
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendReceiveBuffer
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Idle
</UL>

<P><STRONG><a name="[139]"></a>drvInt_AppliTimeoutTimerConfig</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, drv_interrupt.o(i.drvInt_AppliTimeoutTimerConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = drvInt_AppliTimeoutTimerConfig &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_UpdateRequestConfig
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Structure_Config
</UL>

<P><STRONG><a name="[157]"></a>drvInt_Enable_RFEvent_IRQ</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv_interrupt.o(i.drvInt_Enable_RFEvent_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = drvInt_Enable_RFEvent_IRQ &rArr; EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
</UL>

<P><STRONG><a name="[148]"></a>drvInt_Enable_Reply_IRQ</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, drv_interrupt.o(i.drvInt_Enable_Reply_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = drvInt_Enable_Reply_IRQ &rArr; EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_EnableInterrupt
</UL>

<P><STRONG><a name="[138]"></a>drvInt_TimeoutTimerConfig</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, drv_interrupt.o(i.drvInt_TimeoutTimerConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = drvInt_TimeoutTimerConfig &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_UpdateRequestConfig
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Structure_Config
</UL>

<P><STRONG><a name="[6b]"></a>main</STRONG> (Thumb, 244 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = main &rArr; ConfigManager_TagHunting &rArr; FELICA_Initialization &rArr; FELICA_Init &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Config
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBClock
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_System
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_On
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Config
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupts_Config
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagHunting
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_HWInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[130]"></a>TimerDelay_ms_Config</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hw_config.o(i.TimerDelay_ms_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TimerDelay_ms_Config &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_UpdateRequestConfig
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[134]"></a>TimerDelay_us_Config</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, hw_config.o(i.TimerDelay_us_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TimerDelay_us_Config &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_UpdateRequestConfig
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[149]"></a>drv95HF_GPIOConfigSPI</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, drv_95hf.o(i.drv95HF_GPIOConfigSPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = drv95HF_GPIOConfigSPI &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_InitializeSPI
</UL>

<P><STRONG><a name="[14a]"></a>drv95HF_GPIOConfigUART</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, drv_95hf.o(i.drv95HF_GPIOConfigUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = drv95HF_GPIOConfigUART &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_InitializeUART
</UL>

<P><STRONG><a name="[14c]"></a>drv95HF_InitializeSPI</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_95hf.o(i.drv95HF_InitializeSPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = drv95HF_InitializeSPI &rArr; drv95HF_StructureConfigSPI &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_StructureConfigSPI
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_RCCConfigSPI
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_GPIOConfigSPI
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_InitilizeSerialInterface
</UL>

<P><STRONG><a name="[14d]"></a>drv95HF_RCCConfigSPI</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_95hf.o(i.drv95HF_RCCConfigSPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = drv95HF_RCCConfigSPI
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_InitializeSPI
</UL>

<P><STRONG><a name="[150]"></a>drv95HF_RCCConfigUART</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_95hf.o(i.drv95HF_RCCConfigUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = drv95HF_RCCConfigUART
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_InitializeUART
</UL>

<P><STRONG><a name="[154]"></a>drv95HF_ReceiveUARTResponse</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, drv_95hf.o(i.drv95HF_ReceiveUARTResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = drv95HF_ReceiveUARTResponse &rArr; UART_ReceiveBuffer &rArr; UART_ReceiveByte &rArr; StopTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveByte
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_PoolingReading
</UL>

<P><STRONG><a name="[152]"></a>drv95HF_SPIPollingCommand</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, drv_95hf.o(i.drv95HF_SPIPollingCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = drv95HF_SPIPollingCommand &rArr; delay_ms &rArr; TimerDelay_ms_Config &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopTimeOut
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimeOut
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendReceiveByte
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_PoolingReading
</UL>

<P><STRONG><a name="[155]"></a>drv95HF_SendSPIResetByte</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_95hf.o(i.drv95HF_SendSPIResetByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = drv95HF_SendSPIResetByte &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_ResetSPI
</UL>

<P><STRONG><a name="[156]"></a>drv95HF_SendUARTCommand</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, drv_95hf.o(i.drv95HF_SendUARTCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = drv95HF_SendUARTCommand &rArr; UART_SendBuffer &rArr; UART_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
</UL>

<P><STRONG><a name="[14e]"></a>drv95HF_StructureConfigSPI</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, drv_95hf.o(i.drv95HF_StructureConfigSPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = drv95HF_StructureConfigSPI &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_StructInit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_InitializeSPI
</UL>

<P><STRONG><a name="[151]"></a>drv95HF_StructureConfigUART</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, drv_95hf.o(i.drv95HF_StructureConfigUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = drv95HF_StructureConfigUART &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_InitializeUART
</UL>

<P><STRONG><a name="[d9]"></a>IRQOut_GPIO_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, drv_interrupt.o(i.IRQOut_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IRQOut_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQOut_Config
</UL>

<P><STRONG><a name="[eb]"></a>FSCIToFSC</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, lib_iso14443apcd.o(i.FSCIToFSC))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_RATS
</UL>

<P><STRONG><a name="[dc]"></a>ISO14443A_AC</STRONG> (Thumb, 688 bytes, Stack size 64 bytes, lib_iso14443apcd.o(i.ISO14443A_AC))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = ISO14443A_AC &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ACLevel3
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ACLevel2
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ACLevel1
</UL>

<P><STRONG><a name="[de]"></a>ISO14443A_ACLevel1</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, lib_iso14443apcd.o(i.ISO14443A_ACLevel1))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = ISO14443A_ACLevel1 &rArr; ISO14443A_AC &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_AC
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_Anticollision
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_MultiAnticollision
</UL>

<P><STRONG><a name="[df]"></a>ISO14443A_ACLevel2</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, lib_iso14443apcd.o(i.ISO14443A_ACLevel2))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = ISO14443A_ACLevel2 &rArr; ISO14443A_AC &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_AC
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_Anticollision
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_MultiAnticollision
</UL>

<P><STRONG><a name="[e0]"></a>ISO14443A_ACLevel3</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, lib_iso14443apcd.o(i.ISO14443A_ACLevel3))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = ISO14443A_ACLevel3 &rArr; ISO14443A_AC &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_AC
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_Anticollision
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_MultiAnticollision
</UL>

<P><STRONG><a name="[ec]"></a>ISO14443A_CompleteStructure</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, lib_iso14443apcd.o(i.ISO14443A_CompleteStructure))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_REQA
</UL>

<P><STRONG><a name="[e5]"></a>ISO14443A_HLTA</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lib_iso14443apcd.o(i.ISO14443A_HLTA))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = ISO14443A_HLTA &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_MultiAnticollision
</UL>

<P><STRONG><a name="[e6]"></a>ISO14443A_InitStructure</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lib_iso14443apcd.o(i.ISO14443A_InitStructure))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_MultiTagHunting
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_Init
</UL>

<P><STRONG><a name="[e9]"></a>ISO14443A_MultiAnticollision</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, lib_iso14443apcd.o(i.ISO14443A_MultiAnticollision))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = ISO14443A_MultiAnticollision &rArr; ISO14443A_ACLevel3 &rArr; ISO14443A_AC &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_HLTA
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ACLevel3
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ACLevel2
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_ACLevel1
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_MultiTagHunting
</UL>

<P><STRONG><a name="[e2]"></a>ISO14443A_RATS</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, lib_iso14443apcd.o(i.ISO14443A_RATS))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = ISO14443A_RATS &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_IsReaderResultCodeOk
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_IsCRCOk
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSCIToFSC
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_Anticollision
</UL>

<P><STRONG><a name="[e7]"></a>ISO14443A_REQA</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lib_iso14443apcd.o(i.ISO14443A_REQA))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = ISO14443A_REQA &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_CompleteStructure
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_IsPresent
</UL>

<P><STRONG><a name="[ed]"></a>ISO14443BReadARConfigB</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lib_iso14443bpcd.o(i.ISO14443BReadARConfigB))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = ISO14443BReadARConfigB &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ReadRegister
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_WriteAndCheckARConfigB
</UL>

<P><STRONG><a name="[f0]"></a>ISO14443B_CompleteStruture</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lib_iso14443bpcd.o(i.ISO14443B_CompleteStruture))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ISO14443B_CompleteStruture
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_ReqB
</UL>

<P><STRONG><a name="[f2]"></a>ISO14443B_InitStructure</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lib_iso14443bpcd.o(i.ISO14443B_InitStructure))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ISO14443B_InitStructure
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_Init
</UL>

<P><STRONG><a name="[f6]"></a>ISO14443B_WriteARConfigB</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lib_iso14443bpcd.o(i.ISO14443B_WriteARConfigB))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = ISO14443B_WriteARConfigB &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_WriteAndCheckARConfigB
</UL>

<P><STRONG><a name="[f3]"></a>ISO14443B_WriteAndCheckARConfigB</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lib_iso14443bpcd.o(i.ISO14443B_WriteAndCheckARConfigB))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = ISO14443B_WriteAndCheckARConfigB &rArr; ISO14443B_WriteARConfigB &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_WriteARConfigB
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443BReadARConfigB
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443B_Init
</UL>

<P><STRONG><a name="[102]"></a>ISO15693_CRC16</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, lib_iso15693pcd.o(i.ISO15693_CRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ISO15693_CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_IsCorrectCRC16Residue
</UL>

<P><STRONG><a name="[f8]"></a>ISO15693_CreateRequestFlag</STRONG> (Thumb, 82 bytes, Stack size 28 bytes, lib_iso15693pcd.o(i.ISO15693_CreateRequestFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ISO15693_CreateRequestFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_GetUID
</UL>

<P><STRONG><a name="[fb]"></a>ISO15693_GetSelectOrAFIFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lib_iso15693pcd.o(i.ISO15693_GetSelectOrAFIFlag))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_Inventory
</UL>

<P><STRONG><a name="[f9]"></a>ISO15693_Inventory</STRONG> (Thumb, 302 bytes, Stack size 72 bytes, lib_iso15693pcd.o(i.ISO15693_Inventory))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = ISO15693_Inventory &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_IsInventoryFlag
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_GetSelectOrAFIFlag
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_IsReaderResultCodeOk
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_GetUID
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_InventoryOneSlot
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_Inventory16Slots
</UL>

<P><STRONG><a name="[fc]"></a>ISO15693_Inventory16Slots</STRONG> (Thumb, 184 bytes, Stack size 72 bytes, lib_iso15693pcd.o(i.ISO15693_Inventory16Slots))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = ISO15693_Inventory16Slots &rArr; ISO15693_Inventory &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayHighPriority_ms
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_SendEOF
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_IsCollisionDetected
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_Inventory
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_RunInventory16slots
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_RunAntiCollision
</UL>

<P><STRONG><a name="[100]"></a>ISO15693_InventoryOneSlot</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, lib_iso15693pcd.o(i.ISO15693_InventoryOneSlot))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = ISO15693_InventoryOneSlot &rArr; ISO15693_Inventory &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_Inventory
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_RunAntiCollision
</UL>

<P><STRONG><a name="[103]"></a>ISO15693_IsATagInTheField</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lib_iso15693pcd.o(i.ISO15693_IsATagInTheField))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_RunAntiCollision
</UL>

<P><STRONG><a name="[107]"></a>ISO15693_IsAddressOrNbSlotsFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lib_iso15693pcd.o(i.ISO15693_IsAddressOrNbSlotsFlag))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_StayQuiet
</UL>

<P><STRONG><a name="[fd]"></a>ISO15693_IsCollisionDetected</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lib_iso15693pcd.o(i.ISO15693_IsCollisionDetected))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_Inventory16Slots
</UL>

<P><STRONG><a name="[101]"></a>ISO15693_IsCorrectCRC16Residue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lib_iso15693pcd.o(i.ISO15693_IsCorrectCRC16Residue))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ISO15693_IsCorrectCRC16Residue &rArr; ISO15693_CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_SplitInventoryResponse
</UL>

<P><STRONG><a name="[fa]"></a>ISO15693_IsInventoryFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lib_iso15693pcd.o(i.ISO15693_IsInventoryFlag))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_Inventory
</UL>

<P><STRONG><a name="[ff]"></a>ISO15693_SendEOF</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lib_iso15693pcd.o(i.ISO15693_SendEOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = ISO15693_SendEOF &rArr; PCD_SendEOF &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendEOF
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_IsReaderResultCodeOk
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_Inventory16Slots
</UL>

<P><STRONG><a name="[105]"></a>ISO15693_StayQuiet</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, lib_iso15693pcd.o(i.ISO15693_StayQuiet))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = ISO15693_StayQuiet &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_IsAddressOrNbSlotsFlag
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_SendRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_RunAntiCollision
</UL>

<P><STRONG><a name="[ad]"></a>FELICA_Init</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, lib_iso18092pcd.o(i.FELICA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = FELICA_Init &rArr; PCD_WriteRegister &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteRegister
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ProtocolSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FELICA_Initialization
</UL>

<P><STRONG><a name="[b2]"></a>FELICA_REQC</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lib_iso18092pcd.o(i.FELICA_REQC))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = FELICA_REQC &rArr; PCD_CheckSendReceive &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_CheckSendReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FELICA_IsPresent
</UL>

<P><STRONG><a name="[115]"></a>IsAnAvailableProtocol</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lib_pcd.o(i.IsAnAvailableProtocol))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_ProtocolSelect
</UL>

<P><STRONG><a name="[8d]"></a>ConfigManager_IDN</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lib_configmanager.o(i.ConfigManager_IDN))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = ConfigManager_IDN &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_HWInit
</UL>

<P><STRONG><a name="[8b]"></a>ConfigManager_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lib_configmanager.o(i.ConfigManager_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ConfigManager_Init &rArr; drv95HF_InitilizeSerialInterface &rArr; drv95HF_InitializeUART &rArr; drv95HF_StructureConfigUART &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_InitilizeSerialInterface
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_InitConfigStructure
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_EnableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_HWInit
</UL>

<P><STRONG><a name="[8c]"></a>ConfigManager_PORsequence</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, lib_configmanager.o(i.ConfigManager_PORsequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = ConfigManager_PORsequence &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendIRQINPulse
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_ResetSPI
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_GetSerialInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_HWInit
</UL>

<P><STRONG><a name="[96]"></a>ConfigManager_Start</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lib_configmanager.o(i.ConfigManager_Start))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigManager_TagHunting
</UL>

<P><STRONG><a name="[a2]"></a>DataStageIn</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, usb_core.o(i.DataStageIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPTxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0
</UL>

<P><STRONG><a name="[a5]"></a>DataStageOut</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, usb_core.o(i.DataStageOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DataStageOut &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMAToUserBufferCopy
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
</UL>

<P><STRONG><a name="[a8]"></a>Data_Setup0</STRONG> (Thumb, 628 bytes, Stack size 40 bytes, usb_core.o(i.Data_Setup0))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[10e]"></a>NoData_Setup0</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, usb_core.o(i.NoData_Setup0))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = NoData_Setup0 &rArr; Standard_ClearFeature &rArr; SetEPTxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetInterface
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetEndPointFeature
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetDeviceFeature
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetConfiguration
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[b5]"></a>HID_Allow512bytesBuffer</STRONG> (Thumb, 38 bytes, Stack size 248 bytes, usb_hid.o(i.HID_Allow512bytesBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = HID_Allow512bytesBuffer &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
</UL>

<P><STRONG><a name="[b6]"></a>HID_CalibrateTagDetection</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usb_hid.o(i.HID_CalibrateTagDetection))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = HID_CalibrateTagDetection &rArr; HID_GetTagDetectionRefValue &rArr; PCD_Idle &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetTagDetectionRefValue
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
</UL>

<P><STRONG><a name="[b8]"></a>HID_ChainedCommand</STRONG> (Thumb, 270 bytes, Stack size 544 bytes, usb_hid.o(i.HID_ChainedCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = HID_ChainedCommand &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
</UL>

<P><STRONG><a name="[d7]"></a>HID_ChainedResponse</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, usb_hid.o(i.HID_ChainedResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HID_ChainedResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
</UL>

<P><STRONG><a name="[b9]"></a>HID_ConfigureTypeBPrime</STRONG> (Thumb, 30 bytes, Stack size 248 bytes, usb_hid.o(i.HID_ConfigureTypeBPrime))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = HID_ConfigureTypeBPrime &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendReceive
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
</UL>

<P><STRONG><a name="[be]"></a>HID_GetHardwareVersion</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, usb_hid.o(i.HID_GetHardwareVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HID_GetHardwareVersion
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
</UL>

<P><STRONG><a name="[bf]"></a>HID_GetIRQOutState</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usb_hid.o(i.HID_GetIRQOutState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HID_GetIRQOutState
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputData
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_IsWakeUp
</UL>

<P><STRONG><a name="[c1]"></a>HID_GetInterfaceBus</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usb_hid.o(i.HID_GetInterfaceBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HID_GetInterfaceBus &rArr; drv95HF_GetInterfacePinState
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_GetInterfacePinState
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
</UL>

<P><STRONG><a name="[d5]"></a>HID_GetMCUversion</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_hid.o(i.HID_GetMCUversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HID_GetMCUversion
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
</UL>

<P><STRONG><a name="[b7]"></a>HID_GetTagDetectionRefValue</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, usb_hid.o(i.HID_GetTagDetectionRefValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = HID_GetTagDetectionRefValue &rArr; PCD_Idle &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_ResetSPI
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_PoolingReading
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_GetSerialInterface
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Idle
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Echo
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_IsWakeUpByTimeOut
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_IsWakeUpByTagDetecting
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CalibrateTagDetection
</UL>

<P><STRONG><a name="[c8]"></a>HID_GotoTagDetectingState</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, usb_hid.o(i.HID_GotoTagDetectingState))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = HID_GotoTagDetectingState &rArr; PCD_Idle &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_ResetSPI
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_GetSerialInterface
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Idle
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_Echo
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
</UL>

<P><STRONG><a name="[c9]"></a>HID_IsWakeUp</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usb_hid.o(i.HID_IsWakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HID_IsWakeUp &rArr; HID_GetIRQOutState
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetIRQOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
</UL>

<P><STRONG><a name="[c6]"></a>HID_IsWakeUpByTagDetecting</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb_hid.o(i.HID_IsWakeUpByTagDetecting))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetTagDetectionRefValue
</UL>

<P><STRONG><a name="[c7]"></a>HID_IsWakeUpByTimeOut</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_hid.o(i.HID_IsWakeUpByTimeOut))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetTagDetectionRefValue
</UL>

<P><STRONG><a name="[ca]"></a>HID_MultiTagResPart2</STRONG> (Thumb, 80 bytes, Stack size 128 bytes, usb_hid.o(i.HID_MultiTagResPart2))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HID_MultiTagResPart2 &rArr; ISO14443A_MultiTagPart2
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_MultiTagPart2
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
</UL>

<P><STRONG><a name="[cc]"></a>HID_Reset95HF</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usb_hid.o(i.HID_Reset95HF))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = HID_Reset95HF &rArr; PCD_PORsequence &rArr; PCD_Echo &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_PORsequence
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
</UL>

<P><STRONG><a name="[ce]"></a>HID_Run15693Anticollision</STRONG> (Thumb, 124 bytes, Stack size 208 bytes, usb_hid.o(i.HID_Run15693Anticollision))
<BR><BR>[Stack]<UL><LI>Max Depth = 2360<LI>Call Chain = HID_Run15693Anticollision &rArr; ISO15693_RunAntiCollision &rArr; ISO15693_Inventory16Slots &rArr; ISO15693_Inventory &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_RunAntiCollision
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
</UL>

<P><STRONG><a name="[d0]"></a>HID_RunInventoty16slots</STRONG> (Thumb, 120 bytes, Stack size 208 bytes, usb_hid.o(i.HID_RunInventoty16slots))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = HID_RunInventoty16slots &rArr; ISO15693_RunInventory16slots &rArr; ISO15693_Inventory16Slots &rArr; ISO15693_Inventory &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO15693_RunInventory16slots
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
</UL>

<P><STRONG><a name="[d2]"></a>HID_RunMultiTagHunting</STRONG> (Thumb, 110 bytes, Stack size 240 bytes, usb_hid.o(i.HID_RunMultiTagHunting))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = HID_RunMultiTagHunting &rArr; ISO14443A_MultiTagHunting &rArr; ISO14443A_MultiAnticollision &rArr; ISO14443A_ACLevel3 &rArr; ISO14443A_AC &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISO14443A_MultiTagHunting
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
</UL>

<P><STRONG><a name="[bc]"></a>HID_SendCustomCommand</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, usb_hid.o(i.HID_SendCustomCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 2376<LI>Call Chain = HID_SendCustomCommand &rArr; HID_Run15693Anticollision &rArr; ISO15693_RunAntiCollision &rArr; ISO15693_Inventory16Slots &rArr; ISO15693_Inventory &rArr; PCD_SendRecv &rArr; drv95HF_SendReceive &rArr; drv95HF_SendSPICommand &rArr; SPI_SendReceiveBuffer &rArr; SPI_SendReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSPINSSPulse
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_SendIRQINPulse
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_ResetSPI
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_PoolingReading
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv95HF_GetSerialInterface
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_StartTagTraking
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_RunMultiTagHunting
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_RunInventoty16slots
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Run15693Anticollision
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Reset95HF
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_MultiTagResPart2
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_IsWakeUp
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GotoTagDetectingState
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetMCUversion
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetInterfaceBus
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_GetHardwareVersion
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_ConfigureTypeBPrime
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_ChainedResponse
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_ChainedCommand
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_CalibrateTagDetection
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Allow512bytesBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Data_Out
</UL>

<P><STRONG><a name="[d6]"></a>HID_StartTagTraking</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb_hid.o(i.HID_StartTagTraking))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_SendCustomCommand
</UL>

<P><STRONG><a name="[120]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[121]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
